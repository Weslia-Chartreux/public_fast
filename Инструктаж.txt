config.py
Переменные, которые отвечают за сервер базы данных и за поднятие API.
Файл config.py имеет единственную переменную path_to_env, в которой нужно указать путь до файла .env, в котором будут указанны данные для авторизации.

Файл .env должен выглядеть так:
DB_USER = "" - логин подключения к бд
DB_PASS = "" - пароль подключения к бд
DB_NAME = "" - название databases
DB_HOST = "" - хост бд
PASSWORD = "" - хешированный пароль для подключения к бд, в auth/auth.py лежат функции для его формирования

Каждый метод должен иметь в json-запросе строчку "password": "значение пароля", если он отсутствует (или неправильный) будет приходить ошибка 401 Unauthorized.

Метод GET:
	1). Запрос по row_id происходит по адресу "host:port/address/", json-файл типа {"row_id": int}. Ответ выглядит так:
	    {'row_id': int, 'addr_init': str, 'addr_clean': str, 'addr_dadata': str, 'addr_yandex': str, 'lat_dadata': float, 'lon_dadata': float, 'aq_dadata': int,
	    'lat_yandex': float, 'lon_yandex': float}
	2). Запрос по addr_ происходит по адресу "host:port/address/addr/", отправляется json-файл типа {"addr": значение, которое нужно найти}, обратно 
	    возвращается массив словарей из базы(в которых колонки addr_ равны отправленному "addr"). Вариант ответа:
	[{'row_id': 12, 'addr_init': 'Москва', 'addr_clean': 'NULL', 'addr_dadata': 'NULL', 'addr_yandex': 'Москва, ул. Ленина', 'lat_dadata': 'NULL', 'lon_dadata': 'NULL', 
	'aq_dadata':'NULL', 'lat_yandex': 'NULL', 'lon_yandex': 'NULL'}, 
	{'row_id': 13, 'addr_init': 'Москва', 'addr_clean': 'NULL', 'addr_dadata': 'NULL', 'addr_yandex': 'NULL', 'lat_dadata': 'NULL', 'lon_dadata': 'NULL', 'aq_dadata': 'NULL', 			'lat_yandex': 'NULL', 'lon_yandex': 'NULL'}, 
	{'row_id': 14, 'addr_init': 'Москва', 'addr_clean': 'NULL', 'addr_dadata': 'NULL', 'addr_yandex': 'NULL', 'lat_dadata': 'NULL', 'lon_dadata': 'NULL', 'aq_dadata': 'NULL', 			'lat_yandex': 'NULL', 'lon_yandex': 'NULL'}]
Метод POST:
	1). Запрос происходит по адресу "host:port/address/", json-файл должен иметь переменную ("addr_init": значение), а также может иметь любые дополнительные переменные 
	('addr_clean': str, 'addr_dadata': str, 'addr_yandex': str, 'lat_dadata': float, 'lon_dadata': float, 'aq_dadata': int, 'lat_yandex': float, 'lon_yandex': float), 
	при успешном запросе возвращаются данные в json, которые были занесены в базу.
Метод DELETE:
	1). Запрос происходит по адресу "host:port/address/", json-файл типа {"row_id": int}, при успешном запросе возвращается строка
	"The deletion was successful."
Метод PATCH:
	1). Запрос происходит по адресу "host:port/address/", json-файл должен иметь переменную ("row_id": int), а также может иметь любые дополнительные переменные 
	('addr_clean': str, 'addr_dadata': str, 'addr_yandex': str, 'lat_dadata': float, 'lon_dadata': float, 'aq_dadata': int, 'lat_yandex': float, 'lon_yandex': float),
	при успешном запросе возвращается строка 'Changes have been successfully applied'.